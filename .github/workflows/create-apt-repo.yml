---
name: "Create apt repo"

"on":  # TODO: This needs to also become a cron for the nightly function to make sense
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    name: Build debs
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        category:
          - name: stable
            ref: v1.3.3
          - name: nightly
            ref: master
        image:
          - name: ubuntu
            version: 22.04
          - name: debian
            version: 12
        target:
          - name: x86_64-unknown-linux-gnu
            debian-name: amd64
            features: native-deps  # crossbuilds take care of deps in their Dockerfile, native ignores Docker
          - name: aarch64-unknown-linux-gnu
            debian-name: arm64
    steps:
      # Step 0. Pick up the stable or nightly source
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: "kanidm/kanidm"
          ref: "${{ matrix.category.ref }}"
      - name: Maybe install native build deps
        # actions-rust-cross is a bit too "clever" and bypasses cross building when native,
        # which then ignores our build deps baked into Cross.toml.
        if: matrix.target.features == 'native-deps'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libssl3 libssl-dev \
            libudev-dev \
            libpam0g-dev
      # Step 1. Crossbuild
      - name: Build packages (cross bins)
        uses: houseabsolute/actions-rust-cross@v0
        with:
          target: ${{ matrix.target.name }}
          args: "--locked --release --bin kanidm_ssh_authorizedkeys --bin kanidm_unixd --bin kanidm_unixd_tasks --bin kanidm-unix"
        env:
          CROSS_CONFIG: "platform/crossbuild/${{ matrix.image.name }}-${{ matrix.image.version }}-${{ matrix.target.name }}/Cross.toml"
      - name: Build packages (cross sdylibs)
        uses: houseabsolute/actions-rust-cross@v0
        with:
          target: ${{ matrix.target.name }}
          args: "--locked --release -p pam_kanidm -p nss_kanidm"
        env:
          CROSS_CONFIG: "platform/crossbuild/${{ matrix.image.name }}-${{ matrix.image.version }}-${{ matrix.target.name }}/Cross.toml"
      - name: Install deb build dependencies
        run: |
            # Since we use ubuntu-latest as the workflow image, the build OS is always ubuntu regardless of the matrix
            scripts/install_ci_build_dependencies.sh \
              "ubuntu" \
              "${{ matrix.target.debian-name }}"
            cargo install cargo-deb
      # Step 2. deb build
      - name: Build packages (debs)
        run: |
          scripts/build_debs.sh "${{ matrix.target.name }}"

      - name: Upload debs
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.image.name }}-${{ matrix.image.version }}$-{{ matrix.target.name }}"
          path: |
            target/${{ matrix.target.name }}/debian/*.deb

  # Step 3. Create the APT repo from the debs
  create-repo:
    name: Create APT repo
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Download previously built debs
        uses: actions/download-artifact@v4
        with:
          path: debs
          merge-multiple: true
      - name: List packages
        run: |
          find $(pwd) -name '*.deb'
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create repo
        uses: jinnatar/actions-aptly-repo@main
        with:
          repository: "${{ matrix.repo.name }}"
          distribution: "${{ matrix.repo.name }}"
          archs: "${{ matrix.repo.archs }}"
          glob: "debs/${{ matrix.repo.name }}/"
          component: dev
          gpg_private_key: "${{ secrets.GPG_PRIVATE_KEY }}"
          passphrase: "${{ secrets.PASSPHRASE }}"
